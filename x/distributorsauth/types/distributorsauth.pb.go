// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: entangle/distributorsauth/distributorsauth.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// DistributorInfo is the struct of distributor
type DistributorInfo struct {
	// address of distributor
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// end_date of distributor
	EndDate uint64 `protobuf:"varint,2,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
}

func (m *DistributorInfo) Reset()         { *m = DistributorInfo{} }
func (m *DistributorInfo) String() string { return proto.CompactTextString(m) }
func (*DistributorInfo) ProtoMessage()    {}
func (*DistributorInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cbb18d464e04bc6, []int{0}
}
func (m *DistributorInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DistributorInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DistributorInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DistributorInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DistributorInfo.Merge(m, src)
}
func (m *DistributorInfo) XXX_Size() int {
	return m.Size()
}
func (m *DistributorInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DistributorInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DistributorInfo proto.InternalMessageInfo

func (m *DistributorInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *DistributorInfo) GetEndDate() uint64 {
	if m != nil {
		return m.EndDate
	}
	return 0
}

// Admin is the struct of admin
type Admin struct {
	// address of admin
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// edit_option of admin
	EditOption bool `protobuf:"varint,2,opt,name=edit_option,json=editOption,proto3" json:"edit_option,omitempty"`
}

func (m *Admin) Reset()         { *m = Admin{} }
func (m *Admin) String() string { return proto.CompactTextString(m) }
func (*Admin) ProtoMessage()    {}
func (*Admin) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cbb18d464e04bc6, []int{1}
}
func (m *Admin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Admin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Admin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Admin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Admin.Merge(m, src)
}
func (m *Admin) XXX_Size() int {
	return m.Size()
}
func (m *Admin) XXX_DiscardUnknown() {
	xxx_messageInfo_Admin.DiscardUnknown(m)
}

var xxx_messageInfo_Admin proto.InternalMessageInfo

func (m *Admin) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Admin) GetEditOption() bool {
	if m != nil {
		return m.EditOption
	}
	return false
}

// AddDistributorProposal
// with a deposit
type AddDistributorProposal struct {
	// title of proposal
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty" yaml:"title"`
	// description of proposal
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty" yaml:"description"`
	// address of distributor
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty" yaml:"address"`
	// end_date of distributor
	EndDate uint64 `protobuf:"varint,4,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty" yaml:"end_date"`
	// deposit of proposal
	Deposit string `protobuf:"bytes,5,opt,name=deposit,proto3" json:"deposit,omitempty" yaml:"deposit"`
}

func (m *AddDistributorProposal) Reset()         { *m = AddDistributorProposal{} }
func (m *AddDistributorProposal) String() string { return proto.CompactTextString(m) }
func (*AddDistributorProposal) ProtoMessage()    {}
func (*AddDistributorProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cbb18d464e04bc6, []int{2}
}
func (m *AddDistributorProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddDistributorProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddDistributorProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddDistributorProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddDistributorProposal.Merge(m, src)
}
func (m *AddDistributorProposal) XXX_Size() int {
	return m.Size()
}
func (m *AddDistributorProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_AddDistributorProposal.DiscardUnknown(m)
}

var xxx_messageInfo_AddDistributorProposal proto.InternalMessageInfo

func init() {
	proto.RegisterType((*DistributorInfo)(nil), "entangle.distributorsauth.DistributorInfo")
	proto.RegisterType((*Admin)(nil), "entangle.distributorsauth.Admin")
	proto.RegisterType((*AddDistributorProposal)(nil), "entangle.distributorsauth.AddDistributorProposal")
}

func init() {
	proto.RegisterFile("entangle/distributorsauth/distributorsauth.proto", fileDescriptor_9cbb18d464e04bc6)
}

var fileDescriptor_9cbb18d464e04bc6 = []byte{
	// 441 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0x3f, 0x6f, 0xd3, 0x40,
	0x14, 0x8f, 0x4b, 0x43, 0xdb, 0x2b, 0xa2, 0xe8, 0x40, 0x55, 0x12, 0x21, 0xbb, 0xba, 0xa1, 0xea,
	0x40, 0x6c, 0x2a, 0x16, 0xd4, 0xad, 0xa6, 0x20, 0x75, 0xa2, 0xf2, 0xc8, 0x12, 0x9d, 0x7d, 0x87,
	0x73, 0xc2, 0xb9, 0x67, 0xf9, 0x5e, 0x2a, 0xfa, 0x0d, 0x18, 0x19, 0x19, 0xfb, 0x09, 0x98, 0xf8,
	0x10, 0x88, 0xa9, 0x23, 0x53, 0x84, 0x92, 0x6f, 0x90, 0x4f, 0x80, 0xec, 0xb3, 0xb1, 0xd5, 0x48,
	0x6c, 0xbe, 0xdf, 0x9f, 0xf7, 0x9e, 0xdf, 0xfb, 0x91, 0x97, 0x52, 0x23, 0xd7, 0x69, 0x26, 0x03,
	0xa1, 0x0c, 0x16, 0x2a, 0x9e, 0x23, 0x14, 0x86, 0xcf, 0x71, 0xba, 0x01, 0xf8, 0x79, 0x01, 0x08,
	0x74, 0xd8, 0x38, 0xfc, 0xfb, 0x82, 0xd1, 0x30, 0x01, 0x33, 0x03, 0x33, 0xa9, 0x84, 0x81, 0x7d,
	0x58, 0xd7, 0xe8, 0x59, 0x0a, 0x29, 0x58, 0xbc, 0xfc, 0xaa, 0xd1, 0xe7, 0x29, 0x40, 0xd9, 0x9b,
	0xe7, 0x2a, 0xe0, 0x5a, 0x03, 0x72, 0x54, 0xa0, 0x6b, 0x0f, 0x7b, 0x47, 0x0e, 0x2e, 0xda, 0x16,
	0x97, 0xfa, 0x23, 0xd0, 0x01, 0xd9, 0xe1, 0x42, 0x14, 0xd2, 0x98, 0x81, 0x73, 0xe4, 0x9c, 0xec,
	0x45, 0xcd, 0x93, 0x0e, 0xc9, 0xae, 0xd4, 0x62, 0x22, 0x38, 0xca, 0xc1, 0xd6, 0x91, 0x73, 0xb2,
	0x1d, 0xed, 0x48, 0x2d, 0x2e, 0x38, 0x4a, 0x16, 0x92, 0xfe, 0xb9, 0x98, 0x29, 0xfd, 0x1f, 0xb7,
	0x47, 0xf6, 0xa5, 0x50, 0x38, 0x81, 0xbc, 0x1c, 0xa0, 0x2a, 0xb0, 0x1b, 0x91, 0x12, 0x7a, 0x5f,
	0x21, 0xec, 0xfb, 0x16, 0x39, 0x3c, 0x17, 0xa2, 0x33, 0xcf, 0x55, 0x01, 0x39, 0x18, 0x9e, 0xd1,
	0x63, 0xd2, 0x47, 0x85, 0x99, 0xb4, 0x35, 0xc3, 0x27, 0xeb, 0x85, 0xf7, 0xe8, 0x86, 0xcf, 0xb2,
	0x33, 0x56, 0xc1, 0x2c, 0xb2, 0x34, 0x7d, 0x4d, 0xf6, 0x85, 0x34, 0x49, 0xa1, 0xda, 0x1e, 0x7b,
	0xe1, 0xe1, 0x7a, 0xe1, 0x51, 0xab, 0xee, 0x90, 0x2c, 0xea, 0x4a, 0xe9, 0x8b, 0x76, 0xee, 0x07,
	0x95, 0x8b, 0xae, 0x17, 0xde, 0x63, 0xeb, 0xaa, 0x09, 0xd6, 0xfe, 0x8b, 0xdf, 0xd9, 0xc4, 0x76,
	0xb9, 0x89, 0xf0, 0xe9, 0x7a, 0xe1, 0x1d, 0x58, 0x79, 0xc3, 0xb0, 0x7f, 0xeb, 0x29, 0xab, 0x0b,
	0x99, 0x83, 0x51, 0x38, 0xe8, 0xdf, 0xaf, 0x5e, 0x13, 0x2c, 0x6a, 0x24, 0x67, 0xc7, 0x5f, 0x6e,
	0xbd, 0xde, 0xb7, 0x5b, 0xcf, 0xf9, 0xf5, 0x63, 0x3c, 0xaa, 0x4f, 0x9c, 0xc2, 0xb5, 0x7f, 0x7d,
	0x1a, 0x4b, 0xe4, 0xa7, 0xfe, 0x1b, 0xd0, 0x28, 0x35, 0x86, 0xc9, 0xcf, 0xa5, 0xeb, 0xdc, 0x2d,
	0x5d, 0xe7, 0xcf, 0xd2, 0x75, 0xbe, 0xae, 0xdc, 0xde, 0xdd, 0xca, 0xed, 0xfd, 0x5e, 0xb9, 0xbd,
	0x0f, 0x97, 0xa9, 0xc2, 0xe9, 0x3c, 0xf6, 0x13, 0x98, 0x05, 0x6f, 0xeb, 0x2c, 0x8d, 0xaf, 0xca,
	0x8b, 0x27, 0x90, 0x05, 0x4d, 0xba, 0xc6, 0x71, 0x06, 0xc9, 0xa7, 0x64, 0xca, 0x95, 0x0e, 0x3e,
	0x6f, 0x86, 0x13, 0x6f, 0x72, 0x69, 0xe2, 0x87, 0x55, 0x50, 0x5e, 0xfd, 0x0d, 0x00, 0x00, 0xff,
	0xff, 0x8d, 0x10, 0x4a, 0xcd, 0xc6, 0x02, 0x00, 0x00,
}

func (m *DistributorInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DistributorInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DistributorInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndDate != 0 {
		i = encodeVarintDistributorsauth(dAtA, i, uint64(m.EndDate))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintDistributorsauth(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Admin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Admin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Admin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EditOption {
		i--
		if m.EditOption {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintDistributorsauth(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddDistributorProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddDistributorProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddDistributorProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Deposit) > 0 {
		i -= len(m.Deposit)
		copy(dAtA[i:], m.Deposit)
		i = encodeVarintDistributorsauth(dAtA, i, uint64(len(m.Deposit)))
		i--
		dAtA[i] = 0x2a
	}
	if m.EndDate != 0 {
		i = encodeVarintDistributorsauth(dAtA, i, uint64(m.EndDate))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintDistributorsauth(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintDistributorsauth(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintDistributorsauth(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDistributorsauth(dAtA []byte, offset int, v uint64) int {
	offset -= sovDistributorsauth(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DistributorInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovDistributorsauth(uint64(l))
	}
	if m.EndDate != 0 {
		n += 1 + sovDistributorsauth(uint64(m.EndDate))
	}
	return n
}

func (m *Admin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovDistributorsauth(uint64(l))
	}
	if m.EditOption {
		n += 2
	}
	return n
}

func (m *AddDistributorProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovDistributorsauth(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovDistributorsauth(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovDistributorsauth(uint64(l))
	}
	if m.EndDate != 0 {
		n += 1 + sovDistributorsauth(uint64(m.EndDate))
	}
	l = len(m.Deposit)
	if l > 0 {
		n += 1 + l + sovDistributorsauth(uint64(l))
	}
	return n
}

func sovDistributorsauth(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDistributorsauth(x uint64) (n int) {
	return sovDistributorsauth(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DistributorInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDistributorsauth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DistributorInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DistributorInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDistributorsauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDistributorsauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDistributorsauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDate", wireType)
			}
			m.EndDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDistributorsauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndDate |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDistributorsauth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDistributorsauth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Admin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDistributorsauth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Admin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Admin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDistributorsauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDistributorsauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDistributorsauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EditOption", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDistributorsauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EditOption = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDistributorsauth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDistributorsauth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddDistributorProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDistributorsauth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddDistributorProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddDistributorProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDistributorsauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDistributorsauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDistributorsauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDistributorsauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDistributorsauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDistributorsauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDistributorsauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDistributorsauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDistributorsauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDate", wireType)
			}
			m.EndDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDistributorsauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndDate |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDistributorsauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDistributorsauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDistributorsauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deposit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDistributorsauth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDistributorsauth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDistributorsauth(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDistributorsauth
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDistributorsauth
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDistributorsauth
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDistributorsauth
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDistributorsauth
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDistributorsauth
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDistributorsauth        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDistributorsauth          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDistributorsauth = fmt.Errorf("proto: unexpected end of group")
)
